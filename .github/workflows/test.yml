name: Tests

on:
    push:
        branches:
            - main
    workflow_dispatch:
    pull_request:
        branches:
            - main
    workflow_call:

# Set default permissions for all jobs
permissions:
    contents: read # Needed to check out code
    checks: write # Needed to report test results
    pull-requests: write # Needed to add comments/annotations to PRs

jobs:
    test:
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest]
        runs-on: ${{ matrix.os }}
        name: ${{ matrix.os == 'ubuntu-latest' && 'test' || format('test ({0})', matrix.os) }}
        defaults:
            run:
                shell: bash
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js environment
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            # Cache root dependencies - only reuse if package-lock.json exactly matches
            - name: Cache root dependencies
              uses: actions/cache@v4
              id: root-cache
              with:
                  path: node_modules
                  key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

            # Cache webview-ui dependencies - only reuse if package-lock.json exactly matches
            - name: Cache webview-ui dependencies
              uses: actions/cache@v4
              id: webview-cache
              with:
                  path: webview-ui/node_modules
                  key: ${{ runner.os }}-npm-webview-${{ hashFiles('webview-ui/package-lock.json') }}

            - name: Install root dependencies
              if: steps.root-cache.outputs.cache-hit != 'true'
              run: npm ci

            - name: Install webview-ui dependencies
              if: steps.webview-cache.outputs.cache-hit != 'true'
              run: cd webview-ui && npm ci

            - name: Install xvfb on Linux
              if: runner.os == 'Linux'
              run: sudo apt-get update && sudo apt-get install -y xvfb

            - name: Set up NPM on Windows
              if: runner.os == 'Windows'
              run: |
                  npm config set script-shell "C:\\Program Files\\Git\\bin\\bash.exe"

            - name: Type Check
              run: npm run check-types

            - name: Lint Check
              run: npm run lint

            - name: Format Check
              run: npm run format

            # Build the extension before running tests
            - name: Build Tests and Extension
              run: npm run pretest

            - name: Unit Tests with coverage - Linux
              id: unit_tests_linux
              continue-on-error: true
              if: runner.os == 'Linux'
              run: |
                  npm install --no-save nyc
                  npx nyc --nycrc-path .nycrc.unit.json --reporter=lcov npm run test:unit

            - name: Unit Tests - Non-Linux
              id: unit_tests_non_linux
              continue-on-error: true
              if: runner.os != 'Linux'
              run: |
                  npm run test:unit

            - name: Extension Integration Tests - Linux
              id: integration_tests_linux
              continue-on-error: true
              if: runner.os == 'Linux'
              run: xvfb-run -a npm run test:coverage

            - name: Extension Integration Tests - Non-Linux
              id: integration_tests_non_linux
              continue-on-error: true
              if: runner.os != 'Linux'
              run: npm run test:integration

            - name: Webview Tests with Coverage
              id: webview_tests
              continue-on-error: true
              run: |
                  cd webview-ui
                  # Ensure coverage dependency is installed
                  npm install --no-save @vitest/coverage-v8
                  npm run test:coverage

            - name: Check Test Results
              if: always()
              run: |
                if [[ ("${{ steps.unit_tests_linux.outcome }}" == "failure" && "${{ runner.os }}" == "Linux") || 
                      ("${{ steps.unit_tests_non_linux.outcome }}" == "failure" && "${{ runner.os }}" != "Linux") ||
                      ("${{ steps.integration_tests_linux.outcome }}" == "failure" && "${{ runner.os }}" == "Linux") || 
                      ("${{ steps.integration_tests_non_linux.outcome }}" == "failure" && "${{ runner.os }}" != "Linux") ||
                      "${{ steps.webview_tests.outcome }}" == "failure" ]]; then
                  echo "One or more test suites failed"
                  exit 1
                fi
                echo "All tests passed"

            - name: Save Coverage Reports
              uses: actions/upload-artifact@v4
              # Only upload artifacts on Linux - We only need coverage from one OS
              if: runner.os == 'Linux'
              with:
                  name: pr-coverage-reports
                  path: |
                      coverage-unit/lcov.info
                      webview-ui/coverage/lcov.info


    qlty:
        needs: test
        runs-on: ubuntu-latest
        # Run on PRs to main, pushes to main, and manual dispatches
        if: always() && needs.test.result == 'success'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetch all history for accurate comparison

            - name: Download Coverage Reports
              uses: actions/download-artifact@v4
              with:
                  name: pr-coverage-reports
                  path: .

            - name: Upload core unit tests coverage to Qlty
              uses: qltysh/qlty-action/coverage@v2
              with:
                  token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
                  # we can merge multiple files if necessary
                  files: |
                    coverage-unit/lcov.info
                  tag: unit:core

            - name: Upload webview-ui unit tests coverage to Qlty
              uses: qltysh/qlty-action/coverage@v2
              with:
                  token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
                  # we can merge multiple files if necessary
                  files: |
                    webview-ui/coverage/lcov.info
                  tag: unit:webview-ui
                  add-prefix: webview-ui/
